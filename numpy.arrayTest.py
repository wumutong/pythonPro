from typing import Counter
import numpy as ny
a= [[3.393533211, 2.331273381],
              [3.110073483, 1.781539638],
              [1.343853454, 3.368312451],
              [3.582294121, 4.679917921],
              [2.280362211, 2.866990212],
              [7.423436752, 4.685324231],
              [5.745231231, 3.532131321],
              [9.172112222, 2.511113104],
              [7.927841231, 3.421455345],
              [7.939831414, 0.791631213]
             ]
b=[0, 0, 0, 0, 0, 0, 0, 1, 1, 2]
# 测试说明 ：array2 == 1 是把 b = 1 类别的取出来全部
# array2 == 1,1 是把 b = 1 类别的 （x,y）中的 y 取出来全部y
array1 = ny.array(a)
array2 = ny.array(b)
print(array1[array2==1],array1[array2==1,1])
print("********************我是分隔符**********************************")

# 输出 c = [3,3,4,4,5]
# 说明 :5 是 i = 0,1,2,3,4  不包括 5
# c = [a[0],a[1],a[2],a[3],a[4]] = [3,3,4,4,5]
a = [3,3,4,4,5,5,6,6]
b = [0,1,2,3,4,5]
c=[a[i] for i in b[0:5]]
print(c)

print("********************我是分隔符**********************************")
# 测试有关 collections 中 Counter 用法 和 字典中 most_common 用法
xa = [1,2,1,1,1,1,2,2,2,0,0,0]
counter = Counter(xa)
print(counter) # 输出一个字典 Counter({1: 5, 2: 4, 0: 3}) 1出现5次  2出现4次 ...
# counter.most_common(1)[0][0]   1 代表取几个最大的值
# 第一个0代表  第一个最大的值的数 第二个0 代表第一个最大值得数出现的频率
print(counter.most_common(1)[0][0]) # 1

print("********************我是分隔符**********************************")
def testAssert(k):
    assert k == 1,"k must be valid" #为你抛出的异常说明
xb = 1 # 如果是xb 不等于 1 会抛出异常
testAssert(xb)

print("********************我是分隔符**********************************")
xc = [1,1,1,1,1,1,1,1] #注意：这是一个列表 不能.shape[]
reshape = ny.array(xc).reshape(2, 4) # 返回一个元组 可以.shape[]
print(reshape)
# 输出:  说明：reshape是改变原列表形状 变 2行 4列 可以看做二维
#[[1 1 1 1]
# [1 1 1 1]]
print(ny.shape(xc),ny.shape(reshape))  # 输出它们形状 (8,) (2, 4)
# [1 1 1 1 1 1 1 1] -> 8 原因 这是一个二维 8
print(ny.array(xc).shape[0]) # 8
# shape[0] 为第一维的长度（行），shape[1] 为第二维的长度（列）
print(reshape.shape[0],reshape.shape[1]) # 2 4
# narray的总元素个数为N 矩阵的第一维度大小为1，第二维度大小为N。
xf = [[1,2],[3,4]]
xv = ny.array(xf).reshape(1,-1)
print(xv) # [[1 2 3 4]]
print(xv.shape[0],xv.shape[1]) # 1 4















































